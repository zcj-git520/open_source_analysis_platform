// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.19.4
// source: api/open_source/v1/open_source.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryFilter_Operator int32

const (
	// 等于
	QueryFilter_GT QueryFilter_Operator = 0
	// 大于等于
	QueryFilter_GTE QueryFilter_Operator = 1
	// 小于
	QueryFilter_LT QueryFilter_Operator = 2
	// 小于等于
	QueryFilter_LTE QueryFilter_Operator = 3
)

// Enum value maps for QueryFilter_Operator.
var (
	QueryFilter_Operator_name = map[int32]string{
		0: "GT",
		1: "GTE",
		2: "LT",
		3: "LTE",
	}
	QueryFilter_Operator_value = map[string]int32{
		"GT":  0,
		"GTE": 1,
		"LT":  2,
		"LTE": 3,
	}
)

func (x QueryFilter_Operator) Enum() *QueryFilter_Operator {
	p := new(QueryFilter_Operator)
	*p = x
	return p
}

func (x QueryFilter_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryFilter_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_api_open_source_v1_open_source_proto_enumTypes[0].Descriptor()
}

func (QueryFilter_Operator) Type() protoreflect.EnumType {
	return &file_api_open_source_v1_open_source_proto_enumTypes[0]
}

func (x QueryFilter_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryFilter_Operator.Descriptor instead.
func (QueryFilter_Operator) EnumDescriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{7, 0}
}

// 排序方式
type SortOrder_Order int32

const (
	// 升序
	SortOrder_ASC SortOrder_Order = 0
	// 降序
	SortOrder_DESC SortOrder_Order = 1
)

// Enum value maps for SortOrder_Order.
var (
	SortOrder_Order_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	SortOrder_Order_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x SortOrder_Order) Enum() *SortOrder_Order {
	p := new(SortOrder_Order)
	*p = x
	return p
}

func (x SortOrder_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrder_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_api_open_source_v1_open_source_proto_enumTypes[1].Descriptor()
}

func (SortOrder_Order) Type() protoreflect.EnumType {
	return &file_api_open_source_v1_open_source_proto_enumTypes[1]
}

func (x SortOrder_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrder_Order.Descriptor instead.
func (SortOrder_Order) EnumDescriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{8, 0}
}

type ScreenLanguageCountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 语言仓库数量
	LanguageCounts []*ScreenLanguageCountReplyLanguageCount `protobuf:"bytes,1,rep,name=languageCounts,proto3" json:"languageCounts,omitempty"`
}

func (x *ScreenLanguageCountReply) Reset() {
	*x = ScreenLanguageCountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenLanguageCountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenLanguageCountReply) ProtoMessage() {}

func (x *ScreenLanguageCountReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenLanguageCountReply.ProtoReflect.Descriptor instead.
func (*ScreenLanguageCountReply) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{0}
}

func (x *ScreenLanguageCountReply) GetLanguageCounts() []*ScreenLanguageCountReplyLanguageCount {
	if x != nil {
		return x.LanguageCounts
	}
	return nil
}

type RepoFavListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页信息
	PageNum int32 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	// 每页数量
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *RepoFavListRequest) Reset() {
	*x = RepoFavListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoFavListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoFavListRequest) ProtoMessage() {}

func (x *RepoFavListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoFavListRequest.ProtoReflect.Descriptor instead.
func (*RepoFavListRequest) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{1}
}

func (x *RepoFavListRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *RepoFavListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type RepoFavRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 仓库id
	RepoIds []int64 `protobuf:"varint,1,rep,packed,name=repoIds,proto3" json:"repoIds,omitempty"`
	// 是否收藏 0是收藏, 1 是取消收藏
	IsFav int32 `protobuf:"varint,2,opt,name=isFav,proto3" json:"isFav,omitempty"`
}

func (x *RepoFavRequest) Reset() {
	*x = RepoFavRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoFavRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoFavRequest) ProtoMessage() {}

func (x *RepoFavRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoFavRequest.ProtoReflect.Descriptor instead.
func (*RepoFavRequest) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{2}
}

func (x *RepoFavRequest) GetRepoIds() []int64 {
	if x != nil {
		return x.RepoIds
	}
	return nil
}

func (x *RepoFavRequest) GetIsFav() int32 {
	if x != nil {
		return x.IsFav
	}
	return 0
}

type RepoFavReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepoFavReply) Reset() {
	*x = RepoFavReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoFavReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoFavReply) ProtoMessage() {}

func (x *RepoFavReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoFavReply.ProtoReflect.Descriptor instead.
func (*RepoFavReply) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{3}
}

type RepoMeasureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页信息
	PageNum int32 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	// 每页数量
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	// 指标类型 0: star 1: fork 2: watch 3: issue
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// 日期类型 0: day 1: week 2: month
	DateType int32 `protobuf:"varint,4,opt,name=dateType,proto3" json:"dateType,omitempty"`
	// 天数
	Num int32 `protobuf:"varint,5,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *RepoMeasureRequest) Reset() {
	*x = RepoMeasureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoMeasureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoMeasureRequest) ProtoMessage() {}

func (x *RepoMeasureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoMeasureRequest.ProtoReflect.Descriptor instead.
func (*RepoMeasureRequest) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{4}
}

func (x *RepoMeasureRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *RepoMeasureRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RepoMeasureRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RepoMeasureRequest) GetDateType() int32 {
	if x != nil {
		return x.DateType
	}
	return 0
}

func (x *RepoMeasureRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type RepoMeasureReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页信息
	PageNum int32 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	// 每页数量
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	// 总条数
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 开源仓库信息
	Repos []*RepoInfo `protobuf:"bytes,4,rep,name=repos,proto3" json:"repos,omitempty"`
}

func (x *RepoMeasureReply) Reset() {
	*x = RepoMeasureReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoMeasureReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoMeasureReply) ProtoMessage() {}

func (x *RepoMeasureReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoMeasureReply.ProtoReflect.Descriptor instead.
func (*RepoMeasureReply) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{5}
}

func (x *RepoMeasureReply) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *RepoMeasureReply) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RepoMeasureReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RepoMeasureReply) GetRepos() []*RepoInfo {
	if x != nil {
		return x.Repos
	}
	return nil
}

type RepoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 仓库id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 仓库名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 仓库全称
	FullName string `protobuf:"bytes,3,opt,name=fullName,proto3" json:"fullName,omitempty"`
	// 仓库图片
	Image string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	// 仓库所有者ID
	OwnerId int64 `protobuf:"varint,5,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	// 仓库所有者名称
	OwnerName string `protobuf:"bytes,6,opt,name=ownerName,proto3" json:"ownerName,omitempty"`
	// 是否私有
	Private bool `protobuf:"varint,7,opt,name=private,proto3" json:"private,omitempty"`
	// 仓库中文描述
	Desc string `protobuf:"bytes,8,opt,name=desc,proto3" json:"desc,omitempty"`
	// 仓库英文描述
	DescEn string `protobuf:"bytes,9,opt,name=descEn,proto3" json:"descEn,omitempty"`
	// 库主页 URL
	HtmlUrl string `protobuf:"bytes,10,opt,name=htmlUrl,proto3" json:"htmlUrl,omitempty"`
	// 仓库主页 URL
	Homepage string `protobuf:"bytes,11,opt,name=homepage,proto3" json:"homepage,omitempty"`
	// 克隆 URL
	CloneUrl string `protobuf:"bytes,12,opt,name=cloneUrl,proto3" json:"cloneUrl,omitempty"`
	// 仓库星标数量
	StargazersCount int64 `protobuf:"varint,13,opt,name=stargazersCount,proto3" json:"stargazersCount,omitempty"`
	// 仓库关注者数量
	WatchersCount int64 `protobuf:"varint,14,opt,name=watchersCount,proto3" json:"watchersCount,omitempty"`
	// 仓库语言名称
	Language string `protobuf:"bytes,15,opt,name=language,proto3" json:"language,omitempty"`
	// 仓库语言ID
	LanguageId int64 `protobuf:"varint,16,opt,name=languageId,proto3" json:"languageId,omitempty"`
	// 仓库分支数量
	ForksCount int64 `protobuf:"varint,17,opt,name=forksCount,proto3" json:"forksCount,omitempty"`
	// 仓库问题数量
	OpenIssuesCount int64 `protobuf:"varint,18,opt,name=openIssuesCount,proto3" json:"openIssuesCount,omitempty"`
	// 仓库主题
	Topics []string `protobuf:"bytes,19,rep,name=topics,proto3" json:"topics,omitempty"`
	// 仓库问题数量
	OpenIssues int64 `protobuf:"varint,20,opt,name=openIssues,proto3" json:"openIssues,omitempty"`
	// 仓库关注者数量
	Watchers int64 `protobuf:"varint,21,opt,name=watchers,proto3" json:"watchers,omitempty"`
	// 仓库默认分支
	DefaultBranch string `protobuf:"bytes,22,opt,name=defaultBranch,proto3" json:"defaultBranch,omitempty"`
	// 仓库评分
	Score int64 `protobuf:"varint,23,opt,name=score,proto3" json:"score,omitempty"`
	// 仓库大小
	Size int64 `protobuf:"varint,24,opt,name=size,proto3" json:"size,omitempty"`
	// 仓库分支数量
	Forks int64 `protobuf:"varint,25,opt,name=forks,proto3" json:"forks,omitempty"`
	// 是否收藏
	IsFav bool `protobuf:"varint,26,opt,name=isFav,proto3" json:"isFav,omitempty"`
	// 仓库创建时间
	CreatedAt string `protobuf:"bytes,27,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt string `protobuf:"bytes,28,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *RepoInfo) Reset() {
	*x = RepoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoInfo) ProtoMessage() {}

func (x *RepoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoInfo.ProtoReflect.Descriptor instead.
func (*RepoInfo) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{6}
}

func (x *RepoInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RepoInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepoInfo) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *RepoInfo) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *RepoInfo) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *RepoInfo) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *RepoInfo) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *RepoInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *RepoInfo) GetDescEn() string {
	if x != nil {
		return x.DescEn
	}
	return ""
}

func (x *RepoInfo) GetHtmlUrl() string {
	if x != nil {
		return x.HtmlUrl
	}
	return ""
}

func (x *RepoInfo) GetHomepage() string {
	if x != nil {
		return x.Homepage
	}
	return ""
}

func (x *RepoInfo) GetCloneUrl() string {
	if x != nil {
		return x.CloneUrl
	}
	return ""
}

func (x *RepoInfo) GetStargazersCount() int64 {
	if x != nil {
		return x.StargazersCount
	}
	return 0
}

func (x *RepoInfo) GetWatchersCount() int64 {
	if x != nil {
		return x.WatchersCount
	}
	return 0
}

func (x *RepoInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *RepoInfo) GetLanguageId() int64 {
	if x != nil {
		return x.LanguageId
	}
	return 0
}

func (x *RepoInfo) GetForksCount() int64 {
	if x != nil {
		return x.ForksCount
	}
	return 0
}

func (x *RepoInfo) GetOpenIssuesCount() int64 {
	if x != nil {
		return x.OpenIssuesCount
	}
	return 0
}

func (x *RepoInfo) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *RepoInfo) GetOpenIssues() int64 {
	if x != nil {
		return x.OpenIssues
	}
	return 0
}

func (x *RepoInfo) GetWatchers() int64 {
	if x != nil {
		return x.Watchers
	}
	return 0
}

func (x *RepoInfo) GetDefaultBranch() string {
	if x != nil {
		return x.DefaultBranch
	}
	return ""
}

func (x *RepoInfo) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RepoInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *RepoInfo) GetForks() int64 {
	if x != nil {
		return x.Forks
	}
	return 0
}

func (x *RepoInfo) GetIsFav() bool {
	if x != nil {
		return x.IsFav
	}
	return false
}

func (x *RepoInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *RepoInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// 查询条件
type QueryFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 筛选值
	TargetValue int32 `protobuf:"varint,1,opt,name=targetValue,proto3" json:"targetValue,omitempty"`
	// 操作符
	Op QueryFilter_Operator `protobuf:"varint,2,opt,name=op,proto3,enum=open_source.v1.QueryFilter_Operator" json:"op,omitempty"`
	// 筛选字段
	Field string `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *QueryFilter) Reset() {
	*x = QueryFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFilter) ProtoMessage() {}

func (x *QueryFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFilter.ProtoReflect.Descriptor instead.
func (*QueryFilter) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{7}
}

func (x *QueryFilter) GetTargetValue() int32 {
	if x != nil {
		return x.TargetValue
	}
	return 0
}

func (x *QueryFilter) GetOp() QueryFilter_Operator {
	if x != nil {
		return x.Op
	}
	return QueryFilter_GT
}

func (x *QueryFilter) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

// 排序条件
type SortOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 排序方式
	Order SortOrder_Order `protobuf:"varint,1,opt,name=order,proto3,enum=open_source.v1.SortOrder_Order" json:"order,omitempty"`
	// 排序字段
	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *SortOrder) Reset() {
	*x = SortOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortOrder) ProtoMessage() {}

func (x *SortOrder) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortOrder.ProtoReflect.Descriptor instead.
func (*SortOrder) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{8}
}

func (x *SortOrder) GetOrder() SortOrder_Order {
	if x != nil {
		return x.Order
	}
	return SortOrder_ASC
}

func (x *SortOrder) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type RepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页信息
	PageNum int32 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	// 每页数量
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	// 创库名
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 仓库描述
	Desc string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	// 仓库语言ID
	LanguageId int64 `protobuf:"varint,5,opt,name=languageId,proto3" json:"languageId,omitempty"`
	// 仓库所有者ID
	OwnerId int64 `protobuf:"varint,6,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	// 仓库id
	ID int64 `protobuf:"varint,7,opt,name=ID,proto3" json:"ID,omitempty"`
	// 筛选条件
	Filters []*QueryFilter `protobuf:"bytes,8,rep,name=filters,proto3" json:"filters,omitempty"`
	// 排序条件
	Sort *SortOrder `protobuf:"bytes,9,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *RepoRequest) Reset() {
	*x = RepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoRequest) ProtoMessage() {}

func (x *RepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoRequest.ProtoReflect.Descriptor instead.
func (*RepoRequest) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{9}
}

func (x *RepoRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *RepoRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RepoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepoRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *RepoRequest) GetLanguageId() int64 {
	if x != nil {
		return x.LanguageId
	}
	return 0
}

func (x *RepoRequest) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *RepoRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *RepoRequest) GetFilters() []*QueryFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *RepoRequest) GetSort() *SortOrder {
	if x != nil {
		return x.Sort
	}
	return nil
}

type RepoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页信息
	PageNum int32 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	// 每页数量
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Total    int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 开源仓库信息
	Repos []*RepoInfo `protobuf:"bytes,4,rep,name=repos,proto3" json:"repos,omitempty"`
}

func (x *RepoReply) Reset() {
	*x = RepoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoReply) ProtoMessage() {}

func (x *RepoReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoReply.ProtoReflect.Descriptor instead.
func (*RepoReply) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{10}
}

func (x *RepoReply) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *RepoReply) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RepoReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RepoReply) GetRepos() []*RepoInfo {
	if x != nil {
		return x.Repos
	}
	return nil
}

type RepoByCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页
	PageNum int32 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	// 每页数量
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	// 分类id
	Id int64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RepoByCategoryRequest) Reset() {
	*x = RepoByCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoByCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoByCategoryRequest) ProtoMessage() {}

func (x *RepoByCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoByCategoryRequest.ProtoReflect.Descriptor instead.
func (*RepoByCategoryRequest) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{11}
}

func (x *RepoByCategoryRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *RepoByCategoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RepoByCategoryRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RepoByCategoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页信息
	PageNum int32 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	// 每页数量
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Total    int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 开源仓库信息
	Repos []*RepoInfo `protobuf:"bytes,4,rep,name=repos,proto3" json:"repos,omitempty"`
}

func (x *RepoByCategoryReply) Reset() {
	*x = RepoByCategoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoByCategoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoByCategoryReply) ProtoMessage() {}

func (x *RepoByCategoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoByCategoryReply.ProtoReflect.Descriptor instead.
func (*RepoByCategoryReply) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{12}
}

func (x *RepoByCategoryReply) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *RepoByCategoryReply) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RepoByCategoryReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RepoByCategoryReply) GetRepos() []*RepoInfo {
	if x != nil {
		return x.Repos
	}
	return nil
}

type OwnerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 头像URL
	AvatarUrl string `protobuf:"bytes,2,opt,name=avatarUrl,proto3" json:"avatarUrl,omitempty"`
	// 用户类型：User / Organization
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// 用户登录名
	Login string `protobuf:"bytes,4,opt,name=login,proto3" json:"login,omitempty"`
	// 用户主页URL
	HtmlUrl string `protobuf:"bytes,5,opt,name=htmlUrl,proto3" json:"htmlUrl,omitempty"`
	// 用户名
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// 用户邮箱
	Email string `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	// 用户简介
	Bio string `protobuf:"bytes,8,opt,name=bio,proto3" json:"bio,omitempty"`
	// 用户仓库数量
	PublicRepos int64 `protobuf:"varint,9,opt,name=publicRepos,proto3" json:"publicRepos,omitempty"`
	// 用户公开代码片段数量
	PublicGists int64 `protobuf:"varint,10,opt,name=publicGists,proto3" json:"publicGists,omitempty"`
	// 用户粉丝数量
	Followers int64 `protobuf:"varint,11,opt,name=followers,proto3" json:"followers,omitempty"`
	// 用户关注的人数量
	Following int64 `protobuf:"varint,12,opt,name=following,proto3" json:"following,omitempty"`
	// 用户注册时间
	CreatedAt string `protobuf:"bytes,13,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// 用户更新时间
	UpdatedAt string `protobuf:"bytes,14,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"` // 更新时间
}

func (x *OwnerInfo) Reset() {
	*x = OwnerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerInfo) ProtoMessage() {}

func (x *OwnerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerInfo.ProtoReflect.Descriptor instead.
func (*OwnerInfo) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{13}
}

func (x *OwnerInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OwnerInfo) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *OwnerInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OwnerInfo) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *OwnerInfo) GetHtmlUrl() string {
	if x != nil {
		return x.HtmlUrl
	}
	return ""
}

func (x *OwnerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OwnerInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *OwnerInfo) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *OwnerInfo) GetPublicRepos() int64 {
	if x != nil {
		return x.PublicRepos
	}
	return 0
}

func (x *OwnerInfo) GetPublicGists() int64 {
	if x != nil {
		return x.PublicGists
	}
	return 0
}

func (x *OwnerInfo) GetFollowers() int64 {
	if x != nil {
		return x.Followers
	}
	return 0
}

func (x *OwnerInfo) GetFollowing() int64 {
	if x != nil {
		return x.Following
	}
	return 0
}

func (x *OwnerInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *OwnerInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type OwnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页
	PageNum int32 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	// 每页数量
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	// 用户名
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 类型：User / Organization
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// 用户邮箱
	Email string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	// 用户id
	ID int64 `protobuf:"varint,6,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *OwnerRequest) Reset() {
	*x = OwnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerRequest) ProtoMessage() {}

func (x *OwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerRequest.ProtoReflect.Descriptor instead.
func (*OwnerRequest) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{14}
}

func (x *OwnerRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *OwnerRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *OwnerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OwnerRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OwnerRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *OwnerRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type OwnerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页信息
	PageNum int32 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	// 每页数量
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Total    int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 开源仓库信息
	Owners []*OwnerInfo `protobuf:"bytes,4,rep,name=owners,proto3" json:"owners,omitempty"`
}

func (x *OwnerReply) Reset() {
	*x = OwnerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerReply) ProtoMessage() {}

func (x *OwnerReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerReply.ProtoReflect.Descriptor instead.
func (*OwnerReply) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{15}
}

func (x *OwnerReply) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *OwnerReply) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *OwnerReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OwnerReply) GetOwners() []*OwnerInfo {
	if x != nil {
		return x.Owners
	}
	return nil
}

type LanguageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 语言id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 语言名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 语言描述
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// 语言连接
	ImageUrl string `protobuf:"bytes,4,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	// 语言仓库地址
	RepoUrl string `protobuf:"bytes,5,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	// 语言简介
	Bio string `protobuf:"bytes,6,opt,name=bio,proto3" json:"bio,omitempty"`
}

func (x *LanguageInfo) Reset() {
	*x = LanguageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageInfo) ProtoMessage() {}

func (x *LanguageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageInfo.ProtoReflect.Descriptor instead.
func (*LanguageInfo) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{16}
}

func (x *LanguageInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LanguageInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LanguageInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LanguageInfo) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *LanguageInfo) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *LanguageInfo) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

type LanguageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页
	PageNum int32 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	// 每页数量
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	// 语言id
	ID int64 `protobuf:"varint,3,opt,name=ID,proto3" json:"ID,omitempty"`
	// 语言名称
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LanguageRequest) Reset() {
	*x = LanguageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageRequest) ProtoMessage() {}

func (x *LanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageRequest.ProtoReflect.Descriptor instead.
func (*LanguageRequest) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{17}
}

func (x *LanguageRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *LanguageRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *LanguageRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *LanguageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LanguageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页信息
	PageNum int32 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	// 每页数量
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Total    int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 语言信息
	Languages []*LanguageInfo `protobuf:"bytes,4,rep,name=languages,proto3" json:"languages,omitempty"`
}

func (x *LanguageReply) Reset() {
	*x = LanguageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageReply) ProtoMessage() {}

func (x *LanguageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageReply.ProtoReflect.Descriptor instead.
func (*LanguageReply) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{18}
}

func (x *LanguageReply) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *LanguageReply) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *LanguageReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *LanguageReply) GetLanguages() []*LanguageInfo {
	if x != nil {
		return x.Languages
	}
	return nil
}

type CommonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *anypb.Any `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CommonReply) Reset() {
	*x = CommonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonReply) ProtoMessage() {}

func (x *CommonReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonReply.ProtoReflect.Descriptor instead.
func (*CommonReply) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{19}
}

func (x *CommonReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CommonReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommonReply) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type RepoCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页
	PageNum int32 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	// 每页数量
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	// 分类名称
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// 分类id
	ID int64 `protobuf:"varint,3,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *RepoCategoryRequest) Reset() {
	*x = RepoCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoCategoryRequest) ProtoMessage() {}

func (x *RepoCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoCategoryRequest.ProtoReflect.Descriptor instead.
func (*RepoCategoryRequest) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{20}
}

func (x *RepoCategoryRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *RepoCategoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RepoCategoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepoCategoryRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type RepoCategoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分类id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 分类名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 分类描述
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// 分类的图片
	ImageUrl string `protobuf:"bytes,4,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
}

func (x *RepoCategoryInfo) Reset() {
	*x = RepoCategoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoCategoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoCategoryInfo) ProtoMessage() {}

func (x *RepoCategoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoCategoryInfo.ProtoReflect.Descriptor instead.
func (*RepoCategoryInfo) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{21}
}

func (x *RepoCategoryInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RepoCategoryInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepoCategoryInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RepoCategoryInfo) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

type RepoCategoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页信息
	PageNum int32 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	// 每页数量
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Total    int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 语言信息
	Category []*RepoCategoryInfo `protobuf:"bytes,4,rep,name=category,proto3" json:"category,omitempty"`
}

func (x *RepoCategoryReply) Reset() {
	*x = RepoCategoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoCategoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoCategoryReply) ProtoMessage() {}

func (x *RepoCategoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoCategoryReply.ProtoReflect.Descriptor instead.
func (*RepoCategoryReply) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{22}
}

func (x *RepoCategoryReply) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *RepoCategoryReply) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RepoCategoryReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RepoCategoryReply) GetCategory() []*RepoCategoryInfo {
	if x != nil {
		return x.Category
	}
	return nil
}

type ScreenLanguageCountReplyLanguageCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 语言id
	LanguageID int64 `protobuf:"varint,1,opt,name=LanguageID,proto3" json:"LanguageID,omitempty"`
	// 语言名称
	LanguageName string `protobuf:"bytes,2,opt,name=LanguageName,proto3" json:"LanguageName,omitempty"`
	// 仓库数量
	Count int64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ScreenLanguageCountReplyLanguageCount) Reset() {
	*x = ScreenLanguageCountReplyLanguageCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_open_source_v1_open_source_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenLanguageCountReplyLanguageCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenLanguageCountReplyLanguageCount) ProtoMessage() {}

func (x *ScreenLanguageCountReplyLanguageCount) ProtoReflect() protoreflect.Message {
	mi := &file_api_open_source_v1_open_source_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenLanguageCountReplyLanguageCount.ProtoReflect.Descriptor instead.
func (*ScreenLanguageCountReplyLanguageCount) Descriptor() ([]byte, []int) {
	return file_api_open_source_v1_open_source_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ScreenLanguageCountReplyLanguageCount) GetLanguageID() int64 {
	if x != nil {
		return x.LanguageID
	}
	return 0
}

func (x *ScreenLanguageCountReplyLanguageCount) GetLanguageName() string {
	if x != nil {
		return x.LanguageName
	}
	return ""
}

func (x *ScreenLanguageCountReplyLanguageCount) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_api_open_source_v1_open_source_proto protoreflect.FileDescriptor

var file_api_open_source_v1_open_source_proto_rawDesc = []byte{
	0x0a, 0x24, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x01, 0x0a, 0x18, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x5e, 0x0a, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x1a, 0x69, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4a, 0x0a,
	0x12, 0x52, 0x65, 0x70, 0x6f, 0x46, 0x61, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x40, 0x0a, 0x0e, 0x52, 0x65, 0x70,
	0x6f, 0x46, 0x61, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x70, 0x6f, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65,
	0x70, 0x6f, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x46, 0x61, 0x76, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x46, 0x61, 0x76, 0x22, 0x0e, 0x0a, 0x0c, 0x52,
	0x65, 0x70, 0x6f, 0x46, 0x61, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x8c, 0x01, 0x0a, 0x12,
	0x52, 0x65, 0x70, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x52,
	0x65, 0x70, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x05, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x22, 0x92, 0x06, 0x0a, 0x08,
	0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x63, 0x45, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x73, 0x63, 0x45, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x74, 0x6d, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68,
	0x74, 0x6d, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x28,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x7a, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x7a,
	0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f,
	0x72, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x66, 0x6f, 0x72, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70,
	0x65, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x70, 0x65, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x6b,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x73, 0x46, 0x61, 0x76, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x46, 0x61, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x2c,
	0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x45, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4c,
	0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54, 0x45, 0x10, 0x03, 0x22, 0x74, 0x0a, 0x09,
	0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x1a, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43,
	0x10, 0x01, 0x22, 0x9b, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x22, 0x87, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x22, 0x66, 0x0a, 0x15, 0x52, 0x65,
	0x70, 0x6f, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x79, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x22, 0xf5, 0x02, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x74, 0x6d, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68,
	0x74, 0x6d, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62,
	0x69, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x47, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x92,
	0x01, 0x0a, 0x0c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x8b, 0x01, 0x0a, 0x0a, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31,
	0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f,
	0x22, 0x6b, 0x0a, 0x0f, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x97, 0x01,
	0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x09, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6f,
	0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x74, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x9d, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x32, 0xb1, 0x07, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x0e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x2f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x3a, 0x01, 0x2a, 0x22, 0x05, 0x2f, 0x72, 0x65, 0x70,
	0x6f, 0x12, 0x71, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x16, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x79, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x42,
	0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x42,
	0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x2f, 0x62, 0x79, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x6d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x12, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12,
	0x0d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x5d,
	0x0a, 0x07, 0x52, 0x65, 0x70, 0x6f, 0x46, 0x61, 0x76, 0x12, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x46,
	0x61, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x46,
	0x61, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x3a,
	0x01, 0x2a, 0x22, 0x09, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x66, 0x61, 0x76, 0x12, 0x5e, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x46, 0x61, 0x76, 0x12, 0x22, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x46, 0x61, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0b, 0x12, 0x09, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x66, 0x61, 0x76, 0x12, 0x7a, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x12, 0x16, 0x2f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x42, 0x0a, 0x0e, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x2e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_open_source_v1_open_source_proto_rawDescOnce sync.Once
	file_api_open_source_v1_open_source_proto_rawDescData = file_api_open_source_v1_open_source_proto_rawDesc
)

func file_api_open_source_v1_open_source_proto_rawDescGZIP() []byte {
	file_api_open_source_v1_open_source_proto_rawDescOnce.Do(func() {
		file_api_open_source_v1_open_source_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_open_source_v1_open_source_proto_rawDescData)
	})
	return file_api_open_source_v1_open_source_proto_rawDescData
}

var file_api_open_source_v1_open_source_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_open_source_v1_open_source_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_api_open_source_v1_open_source_proto_goTypes = []any{
	(QueryFilter_Operator)(0),                     // 0: open_source.v1.QueryFilter.Operator
	(SortOrder_Order)(0),                          // 1: open_source.v1.SortOrder.Order
	(*ScreenLanguageCountReply)(nil),              // 2: open_source.v1.ScreenLanguageCountReply
	(*RepoFavListRequest)(nil),                    // 3: open_source.v1.RepoFavListRequest
	(*RepoFavRequest)(nil),                        // 4: open_source.v1.RepoFavRequest
	(*RepoFavReply)(nil),                          // 5: open_source.v1.RepoFavReply
	(*RepoMeasureRequest)(nil),                    // 6: open_source.v1.RepoMeasureRequest
	(*RepoMeasureReply)(nil),                      // 7: open_source.v1.RepoMeasureReply
	(*RepoInfo)(nil),                              // 8: open_source.v1.RepoInfo
	(*QueryFilter)(nil),                           // 9: open_source.v1.QueryFilter
	(*SortOrder)(nil),                             // 10: open_source.v1.SortOrder
	(*RepoRequest)(nil),                           // 11: open_source.v1.RepoRequest
	(*RepoReply)(nil),                             // 12: open_source.v1.RepoReply
	(*RepoByCategoryRequest)(nil),                 // 13: open_source.v1.RepoByCategoryRequest
	(*RepoByCategoryReply)(nil),                   // 14: open_source.v1.RepoByCategoryReply
	(*OwnerInfo)(nil),                             // 15: open_source.v1.OwnerInfo
	(*OwnerRequest)(nil),                          // 16: open_source.v1.OwnerRequest
	(*OwnerReply)(nil),                            // 17: open_source.v1.OwnerReply
	(*LanguageInfo)(nil),                          // 18: open_source.v1.LanguageInfo
	(*LanguageRequest)(nil),                       // 19: open_source.v1.LanguageRequest
	(*LanguageReply)(nil),                         // 20: open_source.v1.LanguageReply
	(*CommonReply)(nil),                           // 21: open_source.v1.CommonReply
	(*RepoCategoryRequest)(nil),                   // 22: open_source.v1.RepoCategoryRequest
	(*RepoCategoryInfo)(nil),                      // 23: open_source.v1.RepoCategoryInfo
	(*RepoCategoryReply)(nil),                     // 24: open_source.v1.RepoCategoryReply
	(*ScreenLanguageCountReplyLanguageCount)(nil), // 25: open_source.v1.ScreenLanguageCountReply.languageCount
	(*anypb.Any)(nil),                             // 26: google.protobuf.Any
	(*emptypb.Empty)(nil),                         // 27: google.protobuf.Empty
}
var file_api_open_source_v1_open_source_proto_depIdxs = []int32{
	25, // 0: open_source.v1.ScreenLanguageCountReply.languageCounts:type_name -> open_source.v1.ScreenLanguageCountReply.languageCount
	8,  // 1: open_source.v1.RepoMeasureReply.repos:type_name -> open_source.v1.RepoInfo
	0,  // 2: open_source.v1.QueryFilter.op:type_name -> open_source.v1.QueryFilter.Operator
	1,  // 3: open_source.v1.SortOrder.order:type_name -> open_source.v1.SortOrder.Order
	9,  // 4: open_source.v1.RepoRequest.filters:type_name -> open_source.v1.QueryFilter
	10, // 5: open_source.v1.RepoRequest.sort:type_name -> open_source.v1.SortOrder
	8,  // 6: open_source.v1.RepoReply.repos:type_name -> open_source.v1.RepoInfo
	8,  // 7: open_source.v1.RepoByCategoryReply.repos:type_name -> open_source.v1.RepoInfo
	15, // 8: open_source.v1.OwnerReply.owners:type_name -> open_source.v1.OwnerInfo
	18, // 9: open_source.v1.LanguageReply.languages:type_name -> open_source.v1.LanguageInfo
	26, // 10: open_source.v1.CommonReply.data:type_name -> google.protobuf.Any
	23, // 11: open_source.v1.RepoCategoryReply.category:type_name -> open_source.v1.RepoCategoryInfo
	19, // 12: open_source.v1.OpenSource.GetLanguage:input_type -> open_source.v1.LanguageRequest
	16, // 13: open_source.v1.OpenSource.GetOwner:input_type -> open_source.v1.OwnerRequest
	11, // 14: open_source.v1.OpenSource.GetRepo:input_type -> open_source.v1.RepoRequest
	22, // 15: open_source.v1.OpenSource.GetRepoCategory:input_type -> open_source.v1.RepoCategoryRequest
	13, // 16: open_source.v1.OpenSource.GetRepoByCategory:input_type -> open_source.v1.RepoByCategoryRequest
	6,  // 17: open_source.v1.OpenSource.GetRepoMeasure:input_type -> open_source.v1.RepoMeasureRequest
	4,  // 18: open_source.v1.OpenSource.RepoFav:input_type -> open_source.v1.RepoFavRequest
	3,  // 19: open_source.v1.OpenSource.GetRepoFav:input_type -> open_source.v1.RepoFavListRequest
	27, // 20: open_source.v1.OpenSource.GetScreenLanguageCount:input_type -> google.protobuf.Empty
	20, // 21: open_source.v1.OpenSource.GetLanguage:output_type -> open_source.v1.LanguageReply
	17, // 22: open_source.v1.OpenSource.GetOwner:output_type -> open_source.v1.OwnerReply
	12, // 23: open_source.v1.OpenSource.GetRepo:output_type -> open_source.v1.RepoReply
	24, // 24: open_source.v1.OpenSource.GetRepoCategory:output_type -> open_source.v1.RepoCategoryReply
	14, // 25: open_source.v1.OpenSource.GetRepoByCategory:output_type -> open_source.v1.RepoByCategoryReply
	7,  // 26: open_source.v1.OpenSource.GetRepoMeasure:output_type -> open_source.v1.RepoMeasureReply
	5,  // 27: open_source.v1.OpenSource.RepoFav:output_type -> open_source.v1.RepoFavReply
	12, // 28: open_source.v1.OpenSource.GetRepoFav:output_type -> open_source.v1.RepoReply
	2,  // 29: open_source.v1.OpenSource.GetScreenLanguageCount:output_type -> open_source.v1.ScreenLanguageCountReply
	21, // [21:30] is the sub-list for method output_type
	12, // [12:21] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_api_open_source_v1_open_source_proto_init() }
func file_api_open_source_v1_open_source_proto_init() {
	if File_api_open_source_v1_open_source_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_open_source_v1_open_source_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ScreenLanguageCountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RepoFavListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RepoFavRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RepoFavReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RepoMeasureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RepoMeasureReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*RepoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*QueryFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SortOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*RepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*RepoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*RepoByCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*RepoByCategoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*OwnerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*OwnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*OwnerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*LanguageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*LanguageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*LanguageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CommonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*RepoCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*RepoCategoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*RepoCategoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_open_source_v1_open_source_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ScreenLanguageCountReplyLanguageCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_open_source_v1_open_source_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_open_source_v1_open_source_proto_goTypes,
		DependencyIndexes: file_api_open_source_v1_open_source_proto_depIdxs,
		EnumInfos:         file_api_open_source_v1_open_source_proto_enumTypes,
		MessageInfos:      file_api_open_source_v1_open_source_proto_msgTypes,
	}.Build()
	File_api_open_source_v1_open_source_proto = out.File
	file_api_open_source_v1_open_source_proto_rawDesc = nil
	file_api_open_source_v1_open_source_proto_goTypes = nil
	file_api_open_source_v1_open_source_proto_depIdxs = nil
}
