// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v3.19.4
// source: api/open_source/v1/open_source.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOpenSourceGetLanguage = "/open_source.v1.OpenSource/GetLanguage"
const OperationOpenSourceGetOwner = "/open_source.v1.OpenSource/GetOwner"
const OperationOpenSourceGetRepo = "/open_source.v1.OpenSource/GetRepo"
const OperationOpenSourceGetRepoByCategory = "/open_source.v1.OpenSource/GetRepoByCategory"
const OperationOpenSourceGetRepoCategory = "/open_source.v1.OpenSource/GetRepoCategory"
const OperationOpenSourceGetRepoMeasure = "/open_source.v1.OpenSource/GetRepoMeasure"

type OpenSourceHTTPServer interface {
	GetLanguage(context.Context, *LanguageRequest) (*LanguageReply, error)
	GetOwner(context.Context, *OwnerRequest) (*OwnerReply, error)
	GetRepo(context.Context, *RepoRequest) (*RepoReply, error)
	GetRepoByCategory(context.Context, *RepoByCategoryRequest) (*RepoByCategoryReply, error)
	GetRepoCategory(context.Context, *RepoCategoryRequest) (*RepoCategoryReply, error)
	GetRepoMeasure(context.Context, *RepoMeasureRequest) (*RepoMeasureReply, error)
}

func RegisterOpenSourceHTTPServer(s *http.Server, srv OpenSourceHTTPServer) {
	r := s.Route("/")
	r.GET("/language", _OpenSource_GetLanguage0_HTTP_Handler(srv))
	r.GET("/owner", _OpenSource_GetOwner0_HTTP_Handler(srv))
	r.POST("/repo", _OpenSource_GetRepo0_HTTP_Handler(srv))
	r.GET("/repo/category", _OpenSource_GetRepoCategory0_HTTP_Handler(srv))
	r.GET("/repo/bycategory", _OpenSource_GetRepoByCategory0_HTTP_Handler(srv))
	r.GET("/repo/measure", _OpenSource_GetRepoMeasure0_HTTP_Handler(srv))
}

func _OpenSource_GetLanguage0_HTTP_Handler(srv OpenSourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LanguageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOpenSourceGetLanguage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLanguage(ctx, req.(*LanguageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LanguageReply)
		return ctx.Result(200, reply)
	}
}

func _OpenSource_GetOwner0_HTTP_Handler(srv OpenSourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OwnerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOpenSourceGetOwner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOwner(ctx, req.(*OwnerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OwnerReply)
		return ctx.Result(200, reply)
	}
}

func _OpenSource_GetRepo0_HTTP_Handler(srv OpenSourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RepoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOpenSourceGetRepo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRepo(ctx, req.(*RepoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RepoReply)
		return ctx.Result(200, reply)
	}
}

func _OpenSource_GetRepoCategory0_HTTP_Handler(srv OpenSourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RepoCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOpenSourceGetRepoCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRepoCategory(ctx, req.(*RepoCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RepoCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _OpenSource_GetRepoByCategory0_HTTP_Handler(srv OpenSourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RepoByCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOpenSourceGetRepoByCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRepoByCategory(ctx, req.(*RepoByCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RepoByCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _OpenSource_GetRepoMeasure0_HTTP_Handler(srv OpenSourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RepoMeasureRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOpenSourceGetRepoMeasure)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRepoMeasure(ctx, req.(*RepoMeasureRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RepoMeasureReply)
		return ctx.Result(200, reply)
	}
}

type OpenSourceHTTPClient interface {
	GetLanguage(ctx context.Context, req *LanguageRequest, opts ...http.CallOption) (rsp *LanguageReply, err error)
	GetOwner(ctx context.Context, req *OwnerRequest, opts ...http.CallOption) (rsp *OwnerReply, err error)
	GetRepo(ctx context.Context, req *RepoRequest, opts ...http.CallOption) (rsp *RepoReply, err error)
	GetRepoByCategory(ctx context.Context, req *RepoByCategoryRequest, opts ...http.CallOption) (rsp *RepoByCategoryReply, err error)
	GetRepoCategory(ctx context.Context, req *RepoCategoryRequest, opts ...http.CallOption) (rsp *RepoCategoryReply, err error)
	GetRepoMeasure(ctx context.Context, req *RepoMeasureRequest, opts ...http.CallOption) (rsp *RepoMeasureReply, err error)
}

type OpenSourceHTTPClientImpl struct {
	cc *http.Client
}

func NewOpenSourceHTTPClient(client *http.Client) OpenSourceHTTPClient {
	return &OpenSourceHTTPClientImpl{client}
}

func (c *OpenSourceHTTPClientImpl) GetLanguage(ctx context.Context, in *LanguageRequest, opts ...http.CallOption) (*LanguageReply, error) {
	var out LanguageReply
	pattern := "/language"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOpenSourceGetLanguage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OpenSourceHTTPClientImpl) GetOwner(ctx context.Context, in *OwnerRequest, opts ...http.CallOption) (*OwnerReply, error) {
	var out OwnerReply
	pattern := "/owner"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOpenSourceGetOwner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OpenSourceHTTPClientImpl) GetRepo(ctx context.Context, in *RepoRequest, opts ...http.CallOption) (*RepoReply, error) {
	var out RepoReply
	pattern := "/repo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOpenSourceGetRepo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OpenSourceHTTPClientImpl) GetRepoByCategory(ctx context.Context, in *RepoByCategoryRequest, opts ...http.CallOption) (*RepoByCategoryReply, error) {
	var out RepoByCategoryReply
	pattern := "/repo/bycategory"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOpenSourceGetRepoByCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OpenSourceHTTPClientImpl) GetRepoCategory(ctx context.Context, in *RepoCategoryRequest, opts ...http.CallOption) (*RepoCategoryReply, error) {
	var out RepoCategoryReply
	pattern := "/repo/category"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOpenSourceGetRepoCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OpenSourceHTTPClientImpl) GetRepoMeasure(ctx context.Context, in *RepoMeasureRequest, opts ...http.CallOption) (*RepoMeasureReply, error) {
	var out RepoMeasureReply
	pattern := "/repo/measure"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOpenSourceGetRepoMeasure))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
