// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: api/open_source/v1/open_source.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OpenSource_GetLanguage_FullMethodName            = "/open_source.v1.OpenSource/GetLanguage"
	OpenSource_GetOwner_FullMethodName               = "/open_source.v1.OpenSource/GetOwner"
	OpenSource_GetRepo_FullMethodName                = "/open_source.v1.OpenSource/GetRepo"
	OpenSource_GetRepoCategory_FullMethodName        = "/open_source.v1.OpenSource/GetRepoCategory"
	OpenSource_GetRepoByCategory_FullMethodName      = "/open_source.v1.OpenSource/GetRepoByCategory"
	OpenSource_GetRepoMeasure_FullMethodName         = "/open_source.v1.OpenSource/GetRepoMeasure"
	OpenSource_RepoFav_FullMethodName                = "/open_source.v1.OpenSource/RepoFav"
	OpenSource_GetRepoFav_FullMethodName             = "/open_source.v1.OpenSource/GetRepoFav"
	OpenSource_GetScreenLanguageCount_FullMethodName = "/open_source.v1.OpenSource/GetScreenLanguageCount"
	OpenSource_GetScreenCategoryCount_FullMethodName = "/open_source.v1.OpenSource/GetScreenCategoryCount"
	OpenSource_GetScreenRepoMeasure_FullMethodName   = "/open_source.v1.OpenSource/GetScreenRepoMeasure"
	OpenSource_GetMessage_FullMethodName             = "/open_source.v1.OpenSource/GetMessage"
)

// OpenSourceClient is the client API for OpenSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenSourceClient interface {
	GetLanguage(ctx context.Context, in *LanguageRequest, opts ...grpc.CallOption) (*LanguageReply, error)
	GetOwner(ctx context.Context, in *OwnerRequest, opts ...grpc.CallOption) (*OwnerReply, error)
	GetRepo(ctx context.Context, in *RepoRequest, opts ...grpc.CallOption) (*RepoReply, error)
	GetRepoCategory(ctx context.Context, in *RepoCategoryRequest, opts ...grpc.CallOption) (*RepoCategoryReply, error)
	GetRepoByCategory(ctx context.Context, in *RepoByCategoryRequest, opts ...grpc.CallOption) (*RepoByCategoryReply, error)
	GetRepoMeasure(ctx context.Context, in *RepoMeasureRequest, opts ...grpc.CallOption) (*RepoMeasureReply, error)
	RepoFav(ctx context.Context, in *RepoFavRequest, opts ...grpc.CallOption) (*RepoFavReply, error)
	GetRepoFav(ctx context.Context, in *RepoFavListRequest, opts ...grpc.CallOption) (*RepoReply, error)
	GetScreenLanguageCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ScreenLanguageCountReply, error)
	GetScreenCategoryCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ScreenCategoryCountReply, error)
	GetScreenRepoMeasure(ctx context.Context, in *RepoMeasureRequest, opts ...grpc.CallOption) (*RepoMeasureReply, error)
	GetMessage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MessageReply, error)
}

type openSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenSourceClient(cc grpc.ClientConnInterface) OpenSourceClient {
	return &openSourceClient{cc}
}

func (c *openSourceClient) GetLanguage(ctx context.Context, in *LanguageRequest, opts ...grpc.CallOption) (*LanguageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageReply)
	err := c.cc.Invoke(ctx, OpenSource_GetLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSourceClient) GetOwner(ctx context.Context, in *OwnerRequest, opts ...grpc.CallOption) (*OwnerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OwnerReply)
	err := c.cc.Invoke(ctx, OpenSource_GetOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSourceClient) GetRepo(ctx context.Context, in *RepoRequest, opts ...grpc.CallOption) (*RepoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepoReply)
	err := c.cc.Invoke(ctx, OpenSource_GetRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSourceClient) GetRepoCategory(ctx context.Context, in *RepoCategoryRequest, opts ...grpc.CallOption) (*RepoCategoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepoCategoryReply)
	err := c.cc.Invoke(ctx, OpenSource_GetRepoCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSourceClient) GetRepoByCategory(ctx context.Context, in *RepoByCategoryRequest, opts ...grpc.CallOption) (*RepoByCategoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepoByCategoryReply)
	err := c.cc.Invoke(ctx, OpenSource_GetRepoByCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSourceClient) GetRepoMeasure(ctx context.Context, in *RepoMeasureRequest, opts ...grpc.CallOption) (*RepoMeasureReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepoMeasureReply)
	err := c.cc.Invoke(ctx, OpenSource_GetRepoMeasure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSourceClient) RepoFav(ctx context.Context, in *RepoFavRequest, opts ...grpc.CallOption) (*RepoFavReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepoFavReply)
	err := c.cc.Invoke(ctx, OpenSource_RepoFav_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSourceClient) GetRepoFav(ctx context.Context, in *RepoFavListRequest, opts ...grpc.CallOption) (*RepoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepoReply)
	err := c.cc.Invoke(ctx, OpenSource_GetRepoFav_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSourceClient) GetScreenLanguageCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ScreenLanguageCountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScreenLanguageCountReply)
	err := c.cc.Invoke(ctx, OpenSource_GetScreenLanguageCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSourceClient) GetScreenCategoryCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ScreenCategoryCountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScreenCategoryCountReply)
	err := c.cc.Invoke(ctx, OpenSource_GetScreenCategoryCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSourceClient) GetScreenRepoMeasure(ctx context.Context, in *RepoMeasureRequest, opts ...grpc.CallOption) (*RepoMeasureReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepoMeasureReply)
	err := c.cc.Invoke(ctx, OpenSource_GetScreenRepoMeasure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSourceClient) GetMessage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MessageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, OpenSource_GetMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenSourceServer is the server API for OpenSource service.
// All implementations must embed UnimplementedOpenSourceServer
// for forward compatibility.
type OpenSourceServer interface {
	GetLanguage(context.Context, *LanguageRequest) (*LanguageReply, error)
	GetOwner(context.Context, *OwnerRequest) (*OwnerReply, error)
	GetRepo(context.Context, *RepoRequest) (*RepoReply, error)
	GetRepoCategory(context.Context, *RepoCategoryRequest) (*RepoCategoryReply, error)
	GetRepoByCategory(context.Context, *RepoByCategoryRequest) (*RepoByCategoryReply, error)
	GetRepoMeasure(context.Context, *RepoMeasureRequest) (*RepoMeasureReply, error)
	RepoFav(context.Context, *RepoFavRequest) (*RepoFavReply, error)
	GetRepoFav(context.Context, *RepoFavListRequest) (*RepoReply, error)
	GetScreenLanguageCount(context.Context, *emptypb.Empty) (*ScreenLanguageCountReply, error)
	GetScreenCategoryCount(context.Context, *emptypb.Empty) (*ScreenCategoryCountReply, error)
	GetScreenRepoMeasure(context.Context, *RepoMeasureRequest) (*RepoMeasureReply, error)
	GetMessage(context.Context, *emptypb.Empty) (*MessageReply, error)
	mustEmbedUnimplementedOpenSourceServer()
}

// UnimplementedOpenSourceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOpenSourceServer struct{}

func (UnimplementedOpenSourceServer) GetLanguage(context.Context, *LanguageRequest) (*LanguageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguage not implemented")
}
func (UnimplementedOpenSourceServer) GetOwner(context.Context, *OwnerRequest) (*OwnerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwner not implemented")
}
func (UnimplementedOpenSourceServer) GetRepo(context.Context, *RepoRequest) (*RepoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepo not implemented")
}
func (UnimplementedOpenSourceServer) GetRepoCategory(context.Context, *RepoCategoryRequest) (*RepoCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepoCategory not implemented")
}
func (UnimplementedOpenSourceServer) GetRepoByCategory(context.Context, *RepoByCategoryRequest) (*RepoByCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepoByCategory not implemented")
}
func (UnimplementedOpenSourceServer) GetRepoMeasure(context.Context, *RepoMeasureRequest) (*RepoMeasureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepoMeasure not implemented")
}
func (UnimplementedOpenSourceServer) RepoFav(context.Context, *RepoFavRequest) (*RepoFavReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepoFav not implemented")
}
func (UnimplementedOpenSourceServer) GetRepoFav(context.Context, *RepoFavListRequest) (*RepoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepoFav not implemented")
}
func (UnimplementedOpenSourceServer) GetScreenLanguageCount(context.Context, *emptypb.Empty) (*ScreenLanguageCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreenLanguageCount not implemented")
}
func (UnimplementedOpenSourceServer) GetScreenCategoryCount(context.Context, *emptypb.Empty) (*ScreenCategoryCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreenCategoryCount not implemented")
}
func (UnimplementedOpenSourceServer) GetScreenRepoMeasure(context.Context, *RepoMeasureRequest) (*RepoMeasureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreenRepoMeasure not implemented")
}
func (UnimplementedOpenSourceServer) GetMessage(context.Context, *emptypb.Empty) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedOpenSourceServer) mustEmbedUnimplementedOpenSourceServer() {}
func (UnimplementedOpenSourceServer) testEmbeddedByValue()                    {}

// UnsafeOpenSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenSourceServer will
// result in compilation errors.
type UnsafeOpenSourceServer interface {
	mustEmbedUnimplementedOpenSourceServer()
}

func RegisterOpenSourceServer(s grpc.ServiceRegistrar, srv OpenSourceServer) {
	// If the following call pancis, it indicates UnimplementedOpenSourceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OpenSource_ServiceDesc, srv)
}

func _OpenSource_GetLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSourceServer).GetLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenSource_GetLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSourceServer).GetLanguage(ctx, req.(*LanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSource_GetOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSourceServer).GetOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenSource_GetOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSourceServer).GetOwner(ctx, req.(*OwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSource_GetRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSourceServer).GetRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenSource_GetRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSourceServer).GetRepo(ctx, req.(*RepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSource_GetRepoCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSourceServer).GetRepoCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenSource_GetRepoCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSourceServer).GetRepoCategory(ctx, req.(*RepoCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSource_GetRepoByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSourceServer).GetRepoByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenSource_GetRepoByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSourceServer).GetRepoByCategory(ctx, req.(*RepoByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSource_GetRepoMeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoMeasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSourceServer).GetRepoMeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenSource_GetRepoMeasure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSourceServer).GetRepoMeasure(ctx, req.(*RepoMeasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSource_RepoFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoFavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSourceServer).RepoFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenSource_RepoFav_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSourceServer).RepoFav(ctx, req.(*RepoFavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSource_GetRepoFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoFavListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSourceServer).GetRepoFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenSource_GetRepoFav_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSourceServer).GetRepoFav(ctx, req.(*RepoFavListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSource_GetScreenLanguageCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSourceServer).GetScreenLanguageCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenSource_GetScreenLanguageCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSourceServer).GetScreenLanguageCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSource_GetScreenCategoryCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSourceServer).GetScreenCategoryCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenSource_GetScreenCategoryCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSourceServer).GetScreenCategoryCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSource_GetScreenRepoMeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoMeasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSourceServer).GetScreenRepoMeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenSource_GetScreenRepoMeasure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSourceServer).GetScreenRepoMeasure(ctx, req.(*RepoMeasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSource_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSourceServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenSource_GetMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSourceServer).GetMessage(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenSource_ServiceDesc is the grpc.ServiceDesc for OpenSource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenSource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "open_source.v1.OpenSource",
	HandlerType: (*OpenSourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLanguage",
			Handler:    _OpenSource_GetLanguage_Handler,
		},
		{
			MethodName: "GetOwner",
			Handler:    _OpenSource_GetOwner_Handler,
		},
		{
			MethodName: "GetRepo",
			Handler:    _OpenSource_GetRepo_Handler,
		},
		{
			MethodName: "GetRepoCategory",
			Handler:    _OpenSource_GetRepoCategory_Handler,
		},
		{
			MethodName: "GetRepoByCategory",
			Handler:    _OpenSource_GetRepoByCategory_Handler,
		},
		{
			MethodName: "GetRepoMeasure",
			Handler:    _OpenSource_GetRepoMeasure_Handler,
		},
		{
			MethodName: "RepoFav",
			Handler:    _OpenSource_RepoFav_Handler,
		},
		{
			MethodName: "GetRepoFav",
			Handler:    _OpenSource_GetRepoFav_Handler,
		},
		{
			MethodName: "GetScreenLanguageCount",
			Handler:    _OpenSource_GetScreenLanguageCount_Handler,
		},
		{
			MethodName: "GetScreenCategoryCount",
			Handler:    _OpenSource_GetScreenCategoryCount_Handler,
		},
		{
			MethodName: "GetScreenRepoMeasure",
			Handler:    _OpenSource_GetScreenRepoMeasure_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _OpenSource_GetMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/open_source/v1/open_source.proto",
}
