// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"collect_open_source_data/internal/biz"
	"collect_open_source_data/internal/conf"
	"collect_open_source_data/internal/data"
	"collect_open_source_data/internal/server"
	"collect_open_source_data/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, auth *conf.Auth, email *conf.Email,collect *conf.Collect, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData)
	client := data.NewRedis(confData)
	dataData, cleanup, err := data.NewData(confData, db, client, logger)
	if err != nil {
		return nil, nil, err
	}
	openSourceRepo := data.NewOpenSourceRepo(dataData, logger)
	openSourceInfo := biz.NewOpenSourceInfo(openSourceRepo, email,collect, logger)
	openSourceService := service.NewOpenSourceService(openSourceInfo)
	grpcServer := server.NewGRPCServer(confServer, openSourceService, logger)
	httpServer := server.NewHTTPServer(confServer, openSourceService, auth, logger)
	taskServer := server.NewTaskServer(openSourceInfo, collect, logger)
	app := newApp(logger, grpcServer, httpServer, taskServer)
	return app, func() {
		cleanup()
	}, nil
}
