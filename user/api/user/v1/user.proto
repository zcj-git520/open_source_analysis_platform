syntax = "proto3";

package user.v1;

import "validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "user/user/v1;v1";
option java_multiple_files = true;
option java_package = "user.v1";

service User {
	rpc Verify (VerifyRequest) returns (VerifyReply){
		option (google.api.http) = {
        post: "/v1/verify"
        body: "*"
      };
	}

	rpc Register (RegisterRequest) returns (RegisterReply){
		option (google.api.http) = {
        post: "/v1/register"
        body: "*"
      };
			}

	rpc Login (LoginRequest) returns (LoginReply){
		  option (google.api.http) = {
        post: "/v1/login"
        body: "*"
      };
	}

	rpc UpdateUser (UpdateUserRequest) returns (UpdateUserReply){
		  option (google.api.http) = {
        put: "/v1/user"
        body: "*"
      };
	}

	rpc GetUser (GetUserRequest) returns (GetUserReply){
		option (google.api.http) = {
        get: "/v1/user"
      };
	}

	rpc ListUser (ListUserRequest) returns (ListUserReply){
		option (google.api.http) = {
        get: "/v1/user/list"
      };
	}
	rpc DeleteUser (DeleteUserRequest) returns (DeleteUserReply){
		option (google.api.http) = {
        delete: "/v1/user"
      };
  }
	rpc RefreshToken(google.protobuf.Empty) returns (RefreshTokenReply){
		option (google.api.http) = {
			get: "/v1/refresh_token"
		};
	}
}


message DeleteUserRequest {
	// 邮箱
  string email = 1 [(validate.rules).string ={min_len: 1}];
	// 邮箱验证码
	string verificationCode = 2 [(validate.rules).string ={min_len: 6, max_len: 6}];
}

message DeleteUserReply {
	// 成功
  bool success = 1;
}

// 邮箱验证
message VerifyRequest {
	// 邮箱
	string email = 1 [(validate.rules).string ={min_len: 1}];
}

message VerifyReply {
	// 成功
	bool success = 1;
}

// 注册信息
message RegisterRequest {
	// 用户名
	string username = 1 [(validate.rules).string ={min_len: 5, max_len: 15}];
	// 密码
	string password = 2 [(validate.rules).string ={min_len: 8, max_len: 15}];
  // 邮箱
	string email = 3 [(validate.rules).string ={min_len: 1}];
	// 手机号
	string phone = 4;
	// 验证码
	string verificationCode = 5 [(validate.rules).string ={min_len: 6, max_len: 6}];
}

// 注册信息返回
message RegisterReply {
	bool success = 1;
}

// 登录请求
message LoginRequest {
	// 用户名
	string username = 1 [(validate.rules).string ={min_len: 5, max_len: 15}];
	// 密码
	string password = 2 [(validate.rules).string ={min_len: 8, max_len: 15}];
}

// 登录返回数据
message LoginReply {
	message Data{
		// 用户ID
		int64 uid = 1;
		// token
		string accessToken = 2;
		// 头像
		string avatar = 3;
		// 昵称
		string nickname = 4;
		// 用户名
		string username = 5;
		// refreshToken
		string refreshToken = 6;
		// 过期时间
		string expires = 7;
		// 手机号
		string phone = 8;
		// 邮箱
		string email = 9;
		// 性别 0:保密 1:男 2:女
		int32 gender = 10;
		// 描述
		string desc = 11;
	}
	// 成功
  bool success = 1;
	// 数据
	Data data = 2;
}

// 更新用户信息
message UpdateUserRequest {
	// 用户ID
	string nickname = 1;
	// 密码
	string password = 2;
	// 头像
	string avatar = 3;
	// 性别
	int32 gender = 4;
	// 手机
	string phone = 5;
	// 更新的状态 -1 注销（后台）
	int32 status = 6;
	// 描述
	string desc = 7;
}
message UpdateUserReply {
	message Data{
		// 用户ID
		int64 uid = 1;
		// token
		string accessToken = 2;
		// 头像
		string avatar = 3;
		// 昵称
		string nickname = 4;
		// 用户名
		string username = 5;
		// refreshToken
		string refreshToken = 6;
		// 过期时间
		string expires = 7;
		// 手机号
		string phone = 8;
		// 邮箱
		string email = 9;
		// 性别 0:保密 1:男 2:女
		int32 gender = 10;
		string desc = 11;
	}
	// 成功
	bool success = 1;
	// 数据
	Data data = 2;
}

message GetUserRequest {
}
message GetUserReply {
	message Data{
		// 用户ID
		int64 uid = 1;
		// 昵称
		string nickname = 2;
		// 用户名
		string username = 3;
		// 邮箱
		string email = 4;
		// 手机号
		string phone = 5;
		// 头像
		string avatar = 6;
		// 性别 0:保密 1:男 2:女
		int32 gender = 7; // 0:保密 1:男 2:女
		// 描述
		string desc = 8;
	}
	// 数据
	Data data = 1;
	// 成功
	bool success = 2;
}

message ListUserRequest {
	int32 page = 1;
  int32 size = 2;
}
message ListUserReply {
	int32 total = 1;
	repeated GetUserReply users = 2;
}

// 刷新token
message RefreshTokenReply{
	message Data{
		// token
		string accessToken = 1;
		// refreshToken
		string refreshToken = 2;
		// 过期时间
		string expires = 3;
	}
	// 数据
	Data data = 1;
	// 成功
	bool success = 2;
}